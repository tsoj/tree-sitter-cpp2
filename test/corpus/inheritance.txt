===========================================================
parameter direction
===========================================================

mytype: type =
{
    protected x: std::string;
    private f: (this) = { do_something_with(x); }
    public f: What;
}

-----------------------------------------------------------

(source_file
  (declaration
    (block_declaration
      (declaration_left_side
        (non_template_identifier))
      (block_definition
        (left_side_of_definition
          (type
            (type_type)))
        (block
          (statement
            (non_block_statement
              (declaration
                (no_definition_declaration
                  (declaration_left_side
                    (non_template_identifier))
                  (type
                    (expression
                      (any_identifier
                        (namespaced_identifier
                          (no_namespace_identifier
                            (non_template_identifier))
                          (no_namespace_identifier
                            (non_template_identifier))))))))))
          (statement
            (block_statement
              (block_declaration
                (declaration_left_side
                  (non_template_identifier))
                (block_definition
                  (left_side_of_definition
                    (type
                      (function_type
                        (function_type_without_return_type
                          (comma_seperated_declarations
                            (function_declaration_argument
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier)))))))))
                  (block
                    (statement
                      (non_block_statement
                        (expression
                          (function_call
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))
                            (parentheses_expression
                              (expression_or_comma_expressions
                                (expression
                                  (any_identifier
                                    (no_namespace_identifier
                                      (non_template_identifier)))))))))))))))
          (statement
            (non_block_statement
              (declaration
                (no_definition_declaration
                  (declaration_left_side
                    (non_template_identifier))
                  (type
                    (expression
                      (any_identifier
                        (no_namespace_identifier
                          (non_template_identifier))))))))))))))

===========================================================
parameter direction
===========================================================

abstract_base: type
= {
    print: (inout virtual this, msg: std::string);
}

derived: type
= {
    this: abstract_base;

    print: (override move this, msg: std::string) = {}
}

-----------------------------------------------------------

(source_file
  (declaration
    (block_declaration
      (declaration_left_side
        (non_template_identifier))
      (block_definition
        (left_side_of_definition
          (type
            (type_type)))
        (block
          (statement
            (non_block_statement
              (declaration
                (no_definition_declaration
                  (declaration_left_side
                    (non_template_identifier))
                  (type
                    (function_type
                      (function_type_without_return_type
                        (comma_seperated_declarations
                          (function_declaration_argument
                            (passing_style)
                            (passing_style)
                            (any_identifier
                              (no_namespace_identifier
                                (non_template_identifier))))
                          (function_declaration_argument
                            (declaration
                              (no_definition_declaration
                                (declaration_left_side
                                  (non_template_identifier))
                                (type
                                  (expression
                                    (any_identifier
                                      (namespaced_identifier
                                        (no_namespace_identifier
                                          (non_template_identifier))
                                        (no_namespace_identifier
                                          (non_template_identifier)))))))))))))))))))))
  (declaration
    (block_declaration
      (declaration_left_side
        (non_template_identifier))
      (block_definition
        (left_side_of_definition
          (type
            (type_type)))
        (block
          (statement
            (non_block_statement
              (declaration
                (no_definition_declaration
                  (declaration_left_side
                    (non_template_identifier))
                  (type
                    (expression
                      (any_identifier
                        (no_namespace_identifier
                          (non_template_identifier)))))))))
          (statement
            (block_statement
              (block_declaration
                (declaration_left_side
                  (non_template_identifier))
                (block_definition
                  (left_side_of_definition
                    (type
                      (function_type
                        (function_type_without_return_type
                          (comma_seperated_declarations
                            (function_declaration_argument
                              (passing_style)
                              (passing_style)
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))
                            (function_declaration_argument
                              (declaration
                                (no_definition_declaration
                                  (declaration_left_side
                                    (non_template_identifier))
                                  (type
                                    (expression
                                      (any_identifier
                                        (namespaced_identifier
                                          (no_namespace_identifier
                                            (non_template_identifier))
                                          (no_namespace_identifier
                                            (non_template_identifier))))))))))))))
                  (block))))))))))
