===========================================================
parameter direction
===========================================================

fun: (forward s1 : std::string, inout s2 : std::string, move s3 : std::string) = {
    std::cout << s1 << s2 << s3 << std::endl;
}

main: (in a := 10, copy c: _, out b : int = 0.001) = {
    b : std::string = "b";
    c : std::string = "c";
    fun(std::string("a"), b, c);
    b = "";
}

-----------------------------------------------------------

(source_file
  (declaration
    (identifier)
    (definition
      (type
        (function_type
          (function_declaration_arguments
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (namespaced_identifier
                        (identifier)
                        (identifier)))))))
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (namespaced_identifier
                        (identifier)
                        (identifier)))))))
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (namespaced_identifier
                        (identifier)
                        (identifier))))))))))
      (block
        (statement
          (expression
            (binary_expression
              (expression
                (any_identifier
                  (non_template_any_identifier
                    (namespaced_identifier
                      (identifier)
                      (identifier)))))
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier))))
                  (expression
                    (binary_expression
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (identifier))))
                      (expression
                        (binary_expression
                          (expression
                            (any_identifier
                              (non_template_any_identifier
                                (identifier))))
                          (expression
                            (any_identifier
                              (non_template_any_identifier
                                (namespaced_identifier
                                  (identifier)
                                  (identifier)))))))))))))))))
  (declaration
    (identifier)
    (definition
      (type
        (function_type
          (function_declaration_arguments
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (definition
                  (expression
                    (literal
                      (number))))))
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (identifier))))))
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (definition
                  (type
                    (any_identifier
                      (non_template_any_identifier
                        (identifier))))
                  (expression
                    (literal
                      (float)))))))))
      (block
        (statement
          (declaration
            (identifier)
            (definition
              (type
                (any_identifier
                  (non_template_any_identifier
                    (namespaced_identifier
                      (identifier)
                      (identifier)))))
              (expression
                (literal
                  (string))))))
        (statement
          (declaration
            (identifier)
            (definition
              (type
                (any_identifier
                  (non_template_any_identifier
                    (namespaced_identifier
                      (identifier)
                      (identifier)))))
              (expression
                (literal
                  (string))))))
        (statement
          (expression
            (function_call
              (expression
                (any_identifier
                  (non_template_any_identifier
                    (identifier))))
              (comma_seperated_expressions
                (expression
                  (function_call
                    (expression
                      (any_identifier
                        (non_template_any_identifier
                          (namespaced_identifier
                            (identifier)
                            (identifier)))))
                    (comma_seperated_expressions
                      (expression
                        (literal
                          (string))))))
                (expression
                  (any_identifier
                    (non_template_any_identifier
                      (identifier))))
                (expression
                  (any_identifier
                    (non_template_any_identifier
                      (identifier))))))))
        (statement
          (expression
            (binary_expression
              (expression
                (any_identifier
                  (non_template_any_identifier
                    (identifier))))
              (expression
                (literal
                  (string))))))))))

===========================================================
function type ids
===========================================================

f: () = std::cout << "hello world!\n";
g_in   : (      s: std::string) = std::cout << "Come in, (s)$\n";
g_inout: (inout s: std::string) = std::cout << "Come in awhile, but take some biscuits on your way out, (s)$!\n";
g_out  : (out   s: std::string) = s = "A Powerful Mage";
g_move : (move  s: std::string) = std::cout << "I hear you've moving, (s)$?\n";

h_forward: (inout s: std::string) -> forward std::string = { std::cout << "Inout (s)$ ... "; return s; }

-----------------------------------------------------------

(source_file
  (declaration
    (identifier)
    (definition
      (type
        (function_type))
      (expression
        (binary_expression
          (expression
            (any_identifier
              (non_template_any_identifier
                (namespaced_identifier
                  (identifier)
                  (identifier)))))
          (expression
            (literal
              (string)))))))
  (declaration
    (identifier)
    (definition
      (type
        (function_type
          (function_declaration_arguments
            (function_declaration_argument
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (namespaced_identifier
                        (identifier)
                        (identifier))))))))))
      (expression
        (binary_expression
          (expression
            (any_identifier
              (non_template_any_identifier
                (namespaced_identifier
                  (identifier)
                  (identifier)))))
          (expression
            (literal
              (string)))))))
  (declaration
    (identifier)
    (definition
      (type
        (function_type
          (function_declaration_arguments
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (namespaced_identifier
                        (identifier)
                        (identifier))))))))))
      (expression
        (binary_expression
          (expression
            (any_identifier
              (non_template_any_identifier
                (namespaced_identifier
                  (identifier)
                  (identifier)))))
          (expression
            (literal
              (string)))))))
  (declaration
    (identifier)
    (definition
      (type
        (function_type
          (function_declaration_arguments
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (namespaced_identifier
                        (identifier)
                        (identifier))))))))))
      (expression
        (binary_expression
          (expression
            (any_identifier
              (non_template_any_identifier
                (identifier))))
          (expression
            (literal
              (string)))))))
  (declaration
    (identifier)
    (definition
      (type
        (function_type
          (function_declaration_arguments
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (namespaced_identifier
                        (identifier)
                        (identifier))))))))))
      (expression
        (binary_expression
          (expression
            (any_identifier
              (non_template_any_identifier
                (namespaced_identifier
                  (identifier)
                  (identifier)))))
          (expression
            (literal
              (string)))))))
  (declaration
    (identifier)
    (definition
      (type
        (function_type
          (function_declaration_arguments
            (function_declaration_argument
              (passing_style)
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (namespaced_identifier
                        (identifier)
                        (identifier))))))))
          (passing_style)
          (type
            (any_identifier
              (non_template_any_identifier
                (namespaced_identifier
                  (identifier)
                  (identifier)))))))
      (block
        (statement
          (expression
            (binary_expression
              (expression
                (any_identifier
                  (non_template_any_identifier
                    (namespaced_identifier
                      (identifier)
                      (identifier)))))
              (expression
                (literal
                  (string))))))
        (statement
          (return_statement
            (expression
              (any_identifier
                (non_template_any_identifier
                  (identifier))))))))))

===========================================================
templates
===========================================================

do_stuff: <a: int, A: type> (b: A) = {
   std::cout << a << b << std::endl;
}

TypeStuff: <a: int, A: type> type = {
    x: std::string;
}

TypeStuff: @hello1 @cpp::is::cool@and_this <a: int, A: type> type = {
    x: std::string;
}

-----------------------------------------------------------

(source_file
  (declaration
    (identifier)
    (definition
      (template_declaration_arguments
        (function_declaration_arguments
          (function_declaration_argument
            (declaration
              (identifier)
              (type
                (any_identifier
                  (non_template_any_identifier
                    (identifier))))))
          (function_declaration_argument
            (declaration
              (identifier)
              (type
                (type_type))))))
      (type
        (function_type
          (function_declaration_arguments
            (function_declaration_argument
              (declaration
                (identifier)
                (type
                  (any_identifier
                    (non_template_any_identifier
                      (identifier)))))))))
      (block
        (statement
          (expression
            (binary_expression
              (expression
                (any_identifier
                  (non_template_any_identifier
                    (namespaced_identifier
                      (identifier)
                      (identifier)))))
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier))))
                  (expression
                    (binary_expression
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (identifier))))
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (namespaced_identifier
                              (identifier)
                              (identifier)))))))))))))))
  (declaration
    (identifier)
    (definition
      (template_declaration_arguments
        (function_declaration_arguments
          (function_declaration_argument
            (declaration
              (identifier)
              (type
                (any_identifier
                  (non_template_any_identifier
                    (identifier))))))
          (function_declaration_argument
            (declaration
              (identifier)
              (type
                (type_type))))))
      (type
        (type_type))
      (block
        (statement
          (declaration
            (identifier)
            (type
              (any_identifier
                (non_template_any_identifier
                  (namespaced_identifier
                    (identifier)
                    (identifier))))))))))
  (declaration
    (identifier)
    (definition
      (metafunction_arguments
        (non_template_any_identifier
          (identifier))
        (non_template_any_identifier
          (namespaced_identifier
            (identifier)
            (identifier)
            (identifier)))
        (non_template_any_identifier
          (identifier)))
      (template_declaration_arguments
        (function_declaration_arguments
          (function_declaration_argument
            (declaration
              (identifier)
              (type
                (any_identifier
                  (non_template_any_identifier
                    (identifier))))))
          (function_declaration_argument
            (declaration
              (identifier)
              (type
                (type_type))))))
      (type
        (type_type))
      (block
        (statement
          (declaration
            (identifier)
            (type
              (any_identifier
                (non_template_any_identifier
                  (namespaced_identifier
                    (identifier)
                    (identifier)))))))))))

===========================================================
calling templates
===========================================================

main: () = {
    a := b < c;
    a := b > c;
    a := b < c > d;
    a := hello<a>;
}

-----------------------------------------------------------

(source_file
  (declaration
    (identifier)
    (definition
      (type
        (function_type))
      (block
        (statement
          (declaration
            (identifier)
            (definition
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier))))
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier)))))))))
        (statement
          (declaration
            (identifier)
            (definition
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier))))
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier)))))))))
        (statement
          (declaration
            (identifier)
            (definition
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier))))
                  (expression
                    (binary_expression
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (identifier))))
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (identifier)))))))))))
        (statement
          (declaration
            (identifier)
            (definition
              (expression
                (any_identifier
                  (non_template_any_identifier
                    (identifier))
                  (template_comma_seperated_expressions
                    (comma_seperated_expressions
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (identifier)))))))))))))))

===========================================================
more calling templates
===========================================================
a := hello<b, c>;

-----------------------------------------------------------

(source_file
  (declaration
    (identifier)
    (definition
      (expression
        (any_identifier
          (non_template_any_identifier
            (identifier))
          (template_comma_seperated_expressions
            (comma_seperated_expressions
              (expression
                (any_identifier
                  (non_template_any_identifier
                    (identifier))))
              (expression
                (any_identifier
                  (non_template_any_identifier
                    (identifier)))))))))))



===========================================================
binary op order
===========================================================
a := a * b + c;

-----------------------------------------------------------
