===========================================================
Member function with multiple/named return values
===========================================================
set: <Key> type = {
    container: std::set<Key>;
    iterator : type == std::set<Key>::iterator;

    insert: (inout this, value: Key) -> (where: iterator, inserted: bool) = {
        set_returned := container.insert(value);
        where    = set_returned.first;
        inserted = set_returned.second;
    }

    ssize: (this) -> i64 = std::ssize(container);

}

-----------------------------------------------------------

(source_file
  (declaration
    (block_declaration
      (non_template_identifier)
      (block_definition
        (left_side_of_definition
          (template_declaration_arguments
            (comma_seperated_declarations
              (function_declaration_argument
                (any_identifier
                  (no_namespace_identifier
                    (non_template_identifier)))))
            (template_close_token))
          (type
            (type_type)))
        (block
          (statement
            (non_block_statement
              (declaration
                (no_definition_declaration
                  (non_template_identifier)
                  (type
                    (expression
                      (any_identifier
                        (namespaced_identifier
                          (no_namespace_identifier
                            (non_template_identifier))
                          (no_namespace_identifier
                            (template_identifier
                              (non_template_identifier)
                              (template_call_arguments
                                (expression_or_comma_expressions
                                  (expression
                                    (any_identifier
                                      (no_namespace_identifier
                                        (non_template_identifier)))))
                                (template_close_token))))))))))))
          (statement
            (non_block_statement
              (declaration
                (expression_declaration
                  (non_template_identifier)
                  (expression_definition
                    (left_side_of_definition
                      (type
                        (type_type)))
                    (expression
                      (any_identifier
                        (namespaced_identifier
                          (no_namespace_identifier
                            (non_template_identifier))
                          (no_namespace_identifier
                            (template_identifier
                              (non_template_identifier)
                              (template_call_arguments
                                (expression_or_comma_expressions
                                  (expression
                                    (any_identifier
                                      (no_namespace_identifier
                                        (non_template_identifier)))))
                                (template_close_token))))
                          (no_namespace_identifier
                            (non_template_identifier))))))))))
          (statement
            (block_statement
              (block_declaration
                (non_template_identifier)
                (block_definition
                  (left_side_of_definition
                    (type
                      (function_type
                        (function_type_without_return_type
                          (comma_seperated_declarations
                            (function_declaration_argument
                              (passing_style)
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))
                            (function_declaration_argument
                              (declaration
                                (no_definition_declaration
                                  (non_template_identifier)
                                  (type
                                    (expression
                                      (any_identifier
                                        (no_namespace_identifier
                                          (non_template_identifier))))))))))
                        (type
                          (function_type
                            (function_type_without_return_type
                              (comma_seperated_declarations
                                (function_declaration_argument
                                  (declaration
                                    (no_definition_declaration
                                      (non_template_identifier)
                                      (type
                                        (expression
                                          (any_identifier
                                            (no_namespace_identifier
                                              (non_template_identifier))))))))
                                (function_declaration_argument
                                  (declaration
                                    (no_definition_declaration
                                      (non_template_identifier)
                                      (type
                                        (expression
                                          (any_identifier
                                            (no_namespace_identifier
                                              (non_template_identifier)))))))))))))))
                  (block
                    (statement
                      (non_block_statement
                        (declaration
                          (expression_declaration
                            (non_template_identifier)
                            (expression_definition
                              (left_side_of_definition)
                              (expression
                                (method_call
                                  (expression
                                    (any_identifier
                                      (no_namespace_identifier
                                        (non_template_identifier))))
                                  (any_identifier
                                    (no_namespace_identifier
                                      (non_template_identifier)))
                                  (parentheses_expression
                                    (expression_or_comma_expressions
                                      (expression
                                        (any_identifier
                                          (no_namespace_identifier
                                            (non_template_identifier)))))))))))))
                    (statement
                      (non_block_statement
                        (expression
                          (binary_expression
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))
                            (expression
                              (member_access
                                (expression
                                  (any_identifier
                                    (no_namespace_identifier
                                      (non_template_identifier))))
                                (any_identifier
                                  (no_namespace_identifier
                                    (non_template_identifier)))))))))
                    (statement
                      (non_block_statement
                        (expression
                          (binary_expression
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))
                            (expression
                              (member_access
                                (expression
                                  (any_identifier
                                    (no_namespace_identifier
                                      (non_template_identifier))))
                                (any_identifier
                                  (no_namespace_identifier
                                    (non_template_identifier))))))))))))))
          (statement
            (non_block_statement
              (declaration
                (expression_declaration
                  (non_template_identifier)
                  (expression_definition
                    (left_side_of_definition
                      (type
                        (function_type
                          (function_type_without_return_type
                            (comma_seperated_declarations
                              (function_declaration_argument
                                (any_identifier
                                  (no_namespace_identifier
                                    (non_template_identifier))))))
                          (type
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))))))
                    (expression
                      (function_call
                        (expression
                          (any_identifier
                            (namespaced_identifier
                              (no_namespace_identifier
                                (non_template_identifier))
                              (no_namespace_identifier
                                (non_template_identifier)))))
                        (parentheses_expression
                          (expression_or_comma_expressions
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))))))))))))))))

===========================================================
No silent discard
===========================================================

f: ()             -> void = { }
g: ()             -> int  = { return 10; }
h: (inout x: int) -> void = { x = 20; }

main: ()
= {
    f();

    std::cout << g();

    _ = g();

    g();

    {
        x := 0;
        h( x );
        std::cout << x;
    };

    {
        x := 0;
        h( x );
        _ = x;
    }

    {
        x := 0;
        h( x );
    }
}


-----------------------------------------------------------

(source_file
  (declaration
    (block_declaration
      (non_template_identifier)
      (block_definition
        (left_side_of_definition
          (type
            (function_type
              (function_type_without_return_type)
              (type
                (expression
                  (any_identifier
                    (no_namespace_identifier
                      (non_template_identifier))))))))
        (block))))
  (declaration
    (block_declaration
      (non_template_identifier)
      (block_definition
        (left_side_of_definition
          (type
            (function_type
              (function_type_without_return_type)
              (type
                (expression
                  (any_identifier
                    (no_namespace_identifier
                      (non_template_identifier))))))))
        (block
          (statement
            (non_block_statement
              (return_statement
                (expression
                  (literal
                    (number))))))))))
  (declaration
    (block_declaration
      (non_template_identifier)
      (block_definition
        (left_side_of_definition
          (type
            (function_type
              (function_type_without_return_type
                (comma_seperated_declarations
                  (function_declaration_argument
                    (passing_style)
                    (declaration
                      (no_definition_declaration
                        (non_template_identifier)
                        (type
                          (expression
                            (any_identifier
                              (no_namespace_identifier
                                (non_template_identifier))))))))))
              (type
                (expression
                  (any_identifier
                    (no_namespace_identifier
                      (non_template_identifier))))))))
        (block
          (statement
            (non_block_statement
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (no_namespace_identifier
                        (non_template_identifier))))
                  (expression
                    (literal
                      (number)))))))))))
  (declaration
    (block_declaration
      (non_template_identifier)
      (block_definition
        (left_side_of_definition
          (type
            (function_type
              (function_type_without_return_type))))
        (block
          (statement
            (non_block_statement
              (expression
                (function_call
                  (expression
                    (any_identifier
                      (no_namespace_identifier
                        (non_template_identifier))))
                  (parentheses_expression)))))
          (statement
            (non_block_statement
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (namespaced_identifier
                        (no_namespace_identifier
                          (non_template_identifier))
                        (no_namespace_identifier
                          (non_template_identifier)))))
                  (expression
                    (function_call
                      (expression
                        (any_identifier
                          (no_namespace_identifier
                            (non_template_identifier))))
                      (parentheses_expression)))))))
          (statement
            (non_block_statement
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (no_namespace_identifier
                        (non_template_identifier))))
                  (expression
                    (function_call
                      (expression
                        (any_identifier
                          (no_namespace_identifier
                            (non_template_identifier))))
                      (parentheses_expression)))))))
          (statement
            (non_block_statement
              (expression
                (function_call
                  (expression
                    (any_identifier
                      (no_namespace_identifier
                        (non_template_identifier))))
                  (parentheses_expression)))))
          (statement
            (block_statement
              (block
                (statement
                  (non_block_statement
                    (declaration
                      (expression_declaration
                        (non_template_identifier)
                        (expression_definition
                          (left_side_of_definition)
                          (expression
                            (literal
                              (number))))))))
                (statement
                  (non_block_statement
                    (expression
                      (function_call
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier))))
                        (parentheses_expression
                          (expression_or_comma_expressions
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))))))))
                (statement
                  (non_block_statement
                    (expression
                      (binary_expression
                        (expression
                          (any_identifier
                            (namespaced_identifier
                              (no_namespace_identifier
                                (non_template_identifier))
                              (no_namespace_identifier
                                (non_template_identifier)))))
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier)))))))))))
          (statement)
          (statement
            (block_statement
              (block
                (statement
                  (non_block_statement
                    (declaration
                      (expression_declaration
                        (non_template_identifier)
                        (expression_definition
                          (left_side_of_definition)
                          (expression
                            (literal
                              (number))))))))
                (statement
                  (non_block_statement
                    (expression
                      (function_call
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier))))
                        (parentheses_expression
                          (expression_or_comma_expressions
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))))))))
                (statement
                  (non_block_statement
                    (expression
                      (binary_expression
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier))))
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier)))))))))))
          (statement
            (block_statement
              (block
                (statement
                  (non_block_statement
                    (declaration
                      (expression_declaration
                        (non_template_identifier)
                        (expression_definition
                          (left_side_of_definition)
                          (expression
                            (literal
                              (number))))))))
                (statement
                  (non_block_statement
                    (expression
                      (function_call
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier))))
                        (parentheses_expression
                          (expression_or_comma_expressions
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier))))))))))))))))))

===========================================================
Using function types with std::function and *pfunc
===========================================================

decorate_int: (i: i32) -> std::string = "--> (i)$ <--";

main: () = {
    pf1: std::function< (i: i32) -> std::string > = decorate_int&;
    std::cout << "pf1(123) returned \"(pf1(123))$\"\n";

    pf2: * (i: i32) -> std::string = decorate_int&;
    std::cout << "pf2(456) returned \"(pf2(456))$\"\n";
}

-----------------------------------------------------------

(source_file
  (declaration
    (expression_declaration
      (non_template_identifier)
      (expression_definition
        (left_side_of_definition
          (type
            (function_type
              (function_type_without_return_type
                (comma_seperated_declarations
                  (function_declaration_argument
                    (declaration
                      (no_definition_declaration
                        (non_template_identifier)
                        (type
                          (expression
                            (any_identifier
                              (no_namespace_identifier
                                (non_template_identifier))))))))))
              (type
                (expression
                  (any_identifier
                    (namespaced_identifier
                      (no_namespace_identifier
                        (non_template_identifier))
                      (no_namespace_identifier
                        (non_template_identifier)))))))))
        (expression
          (literal
            (string))))))
  (declaration
    (block_declaration
      (non_template_identifier)
      (block_definition
        (left_side_of_definition
          (type
            (function_type
              (function_type_without_return_type))))
        (block
          (statement
            (non_block_statement
              (declaration
                (expression_declaration
                  (non_template_identifier)
                  (expression_definition
                    (left_side_of_definition
                      (type
                        (expression
                          (any_identifier
                            (namespaced_identifier
                              (no_namespace_identifier
                                (non_template_identifier))
                              (no_namespace_identifier
                                (template_identifier
                                  (non_template_identifier)
                                  (template_call_arguments
                                    (expression_or_comma_expressions
                                      (type
                                        (function_type
                                          (function_type_without_return_type
                                            (comma_seperated_declarations
                                              (function_declaration_argument
                                                (declaration
                                                  (no_definition_declaration
                                                    (non_template_identifier)
                                                    (type
                                                      (expression
                                                        (any_identifier
                                                          (no_namespace_identifier
                                                            (non_template_identifier))))))))))
                                          (type
                                            (expression
                                              (any_identifier
                                                (namespaced_identifier
                                                  (no_namespace_identifier
                                                    (non_template_identifier))
                                                  (no_namespace_identifier
                                                    (non_template_identifier)))))))))
                                    (template_close_token)))))))))
                    (expression
                      (unary_expression
                        (unary_postfix_expression
                          (expression
                            (any_identifier
                              (no_namespace_identifier
                                (non_template_identifier))))))))))))
          (statement
            (non_block_statement
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (namespaced_identifier
                        (no_namespace_identifier
                          (non_template_identifier))
                        (no_namespace_identifier
                          (non_template_identifier)))))
                  (expression
                    (literal
                      (string)))))))
          (statement
            (non_block_statement
              (declaration
                (expression_declaration
                  (non_template_identifier)
                  (expression_definition
                    (left_side_of_definition
                      (type
                        (function_type
                          (function_type_without_return_type
                            (comma_seperated_declarations
                              (function_declaration_argument
                                (declaration
                                  (no_definition_declaration
                                    (non_template_identifier)
                                    (type
                                      (expression
                                        (any_identifier
                                          (no_namespace_identifier
                                            (non_template_identifier))))))))))
                          (type
                            (expression
                              (any_identifier
                                (namespaced_identifier
                                  (no_namespace_identifier
                                    (non_template_identifier))
                                  (no_namespace_identifier
                                    (non_template_identifier)))))))))
                    (expression
                      (unary_expression
                        (unary_postfix_expression
                          (expression
                            (any_identifier
                              (no_namespace_identifier
                                (non_template_identifier))))))))))))
          (statement
            (non_block_statement
              (expression
                (binary_expression
                  (expression
                    (any_identifier
                      (namespaced_identifier
                        (no_namespace_identifier
                          (non_template_identifier))
                        (no_namespace_identifier
                          (non_template_identifier)))))
                  (expression
                    (literal
                      (string))))))))))))
