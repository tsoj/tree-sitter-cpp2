===========================================================
using type qualifiers
===========================================================
p: const * * const i32;
-----------------------------------------------------------

(source_file
  (declaration
    (identifier)
    (no_definition_declaration
      (type
        (expression
          (any_identifier
            (non_template_any_identifier
              (identifier))))))))

===========================================================
bracket call and member access
===========================================================

address := tokens*[pos + num]&;
is_void := u**.identifier* == "void";

-----------------------------------------------------------

(source_file
  (declaration
    (identifier)
    (definition
      (expression
        (unary_expression
          (unary_postfix_expression
            (expression
              (bracket_call
                (expression
                  (unary_expression
                    (unary_postfix_expression
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (identifier)))))))
                (expression_or_comma_expressions
                  (expression
                    (binary_expression
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (identifier))))
                      (expression
                        (any_identifier
                          (non_template_any_identifier
                            (identifier))))))))))))))
  (declaration
    (identifier)
    (definition
      (expression
        (binary_expression
          (expression
            (unary_expression
              (unary_postfix_expression
                (expression
                  (member_access
                    (expression
                      (unary_expression
                        (unary_postfix_expression
                          (expression
                            (unary_expression
                              (unary_postfix_expression
                                (expression
                                  (any_identifier
                                    (non_template_any_identifier
                                      (identifier))))))))))
                    (any_identifier
                      (non_template_any_identifier
                        (identifier))))))))
          (expression
            (literal
              (string))))))))

===========================================================
range operators, triple dot, and double member access
===========================================================

a := b<A>..<c<A>;
a := b..c;
a := b..c<A>;
a := b..c<A>();
a := b... * 3;

-----------------------------------------------------------

(source_file
  (declaration
    (identifier)
    (definition
      (expression
        (binary_expression
          (expression
            (any_identifier
              (template_any_identifier
                (non_template_any_identifier
                  (identifier))
                (template_call_arguments
                  (expression_or_comma_expressions
                    (expression
                      (any_identifier
                        (non_template_any_identifier
                          (identifier)))))
                  (template_close_token)))))
          (expression
            (any_identifier
              (template_any_identifier
                (non_template_any_identifier
                  (identifier))
                (template_call_arguments
                  (expression_or_comma_expressions
                    (expression
                      (any_identifier
                        (non_template_any_identifier
                          (identifier)))))
                  (template_close_token)))))))))
  (declaration
    (identifier)
    (definition
      (expression
        (member_access
          (expression
            (any_identifier
              (non_template_any_identifier
                (identifier))))
          (any_identifier
            (non_template_any_identifier
              (identifier)))))))
  (declaration
    (identifier)
    (definition
      (expression
        (member_access
          (expression
            (any_identifier
              (non_template_any_identifier
                (identifier))))
          (any_identifier
            (template_any_identifier
              (non_template_any_identifier
                (identifier))
              (template_call_arguments
                (expression_or_comma_expressions
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier)))))
                (template_close_token))))))))
  (declaration
    (identifier)
    (definition
      (expression
        (method_call
          (expression
            (any_identifier
              (non_template_any_identifier
                (identifier))))
          (any_identifier
            (template_any_identifier
              (non_template_any_identifier
                (identifier))
              (template_call_arguments
                (expression_or_comma_expressions
                  (expression
                    (any_identifier
                      (non_template_any_identifier
                        (identifier)))))
                (template_close_token))))
          (parentheses_expression)))))
  (declaration
    (identifier)
    (definition
      (expression
        (binary_expression
          (expression
            (unary_expression
              (unary_postfix_expression
                (expression
                  (any_identifier
                    (non_template_any_identifier
                      (identifier)))))))
          (expression
            (literal
              (number))))))))
