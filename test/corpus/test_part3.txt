===========================================================
using type qualifiers
===========================================================
p: const * * const i32;
-----------------------------------------------------------

(source_file
  (declaration
    (no_definition_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (type
        (expression
          (any_identifier
            (no_namespace_identifier
              (non_template_identifier
                (ordinary_identifier)))))))))

===========================================================
bracket call and member access
===========================================================

address := tokens*[pos + num]&;
is_void := u**.identifier* == "void";

-----------------------------------------------------------

(source_file
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (unary_expression
            (unary_postfix_expression
              (expression
                (bracket_call
                  (expression
                    (unary_expression
                      (unary_postfix_expression
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier))))))))
                  (expression_or_comma_expressions
                    (expression
                      (binary_expression
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier)))))
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier))))))))))))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (binary_expression
            (expression
              (unary_expression
                (unary_postfix_expression
                  (expression
                    (member_access
                      (expression
                        (unary_expression
                          (unary_postfix_expression
                            (expression
                              (unary_expression
                                (unary_postfix_expression
                                  (expression
                                    (any_identifier
                                      (no_namespace_identifier
                                        (non_template_identifier
                                          (ordinary_identifier)))))))))))
                      (any_identifier
                        (no_namespace_identifier
                          (non_template_identifier
                            (ordinary_identifier)))))))))
            (expression
              (literal
                (string)))))))))

===========================================================
range operators, triple dot, and double member access
===========================================================

a := b<A>..<c<A>;
a := b..c;
a := b..c<A>;
a := b..c<A>();
a := b... * 3;

-----------------------------------------------------------

(source_file
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (binary_expression
            (expression
              (any_identifier
                (no_namespace_identifier
                  (template_identifier
                    (non_template_identifier
                      (ordinary_identifier))
                    (template_call_arguments
                      (expression_or_comma_expressions
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier)))))))))))
            (expression
              (any_identifier
                (no_namespace_identifier
                  (template_identifier
                    (non_template_identifier
                      (ordinary_identifier))
                    (template_call_arguments
                      (expression_or_comma_expressions
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier))))))))))))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (member_access
            (expression
              (any_identifier
                (no_namespace_identifier
                  (non_template_identifier
                    (ordinary_identifier)))))
            (any_identifier
              (no_namespace_identifier
                (non_template_identifier
                  (ordinary_identifier)))))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (member_access
            (expression
              (any_identifier
                (no_namespace_identifier
                  (non_template_identifier
                    (ordinary_identifier)))))
            (any_identifier
              (no_namespace_identifier
                (template_identifier
                  (non_template_identifier
                    (ordinary_identifier))
                  (template_call_arguments
                    (expression_or_comma_expressions
                      (expression
                        (any_identifier
                          (no_namespace_identifier
                            (non_template_identifier
                              (ordinary_identifier)))))))))))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (method_call
            (expression
              (any_identifier
                (no_namespace_identifier
                  (non_template_identifier
                    (ordinary_identifier)))))
            (any_identifier
              (no_namespace_identifier
                (template_identifier
                  (non_template_identifier
                    (ordinary_identifier))
                  (template_call_arguments
                    (expression_or_comma_expressions
                      (expression
                        (any_identifier
                          (no_namespace_identifier
                            (non_template_identifier
                              (ordinary_identifier))))))))))
            (parentheses_expression))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (binary_expression
            (expression
              (unary_expression
                (unary_postfix_expression
                  (expression
                    (any_identifier
                      (no_namespace_identifier
                        (non_template_identifier
                          (ordinary_identifier))))))))
            (expression
              (literal
                (number)))))))))
