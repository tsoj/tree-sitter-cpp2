===========================================================
using type qualifiers
===========================================================
p: const * * const i32;
-----------------------------------------------------------

(source_file
  (declaration
    (no_definition_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (type
        (expression
          (any_identifier
            (no_namespace_identifier
              (non_template_identifier
                (ordinary_identifier)))))))))

===========================================================
bracket call and member access
===========================================================

address := tokens*[pos + num]&;
is_void := u**.identifier* == "void";

-----------------------------------------------------------

(source_file
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (unary_expression
            (unary_postfix_expression
              (expression
                (bracket_call
                  (expression
                    (unary_expression
                      (unary_postfix_expression
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier))))))))
                  (expression_or_comma_expressions
                    (expression
                      (binary_expression
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier)))))
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier))))))))))))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (binary_expression
            (expression
              (unary_expression
                (unary_postfix_expression
                  (expression
                    (member_access
                      (expression
                        (unary_expression
                          (unary_postfix_expression
                            (expression
                              (unary_expression
                                (unary_postfix_expression
                                  (expression
                                    (any_identifier
                                      (no_namespace_identifier
                                        (non_template_identifier
                                          (ordinary_identifier)))))))))))
                      (any_identifier
                        (no_namespace_identifier
                          (non_template_identifier
                            (ordinary_identifier)))))))))
            (expression
              (literal
                (string)))))))))

===========================================================
range operators, triple dot, and double member access
===========================================================

a := b<A>..<c<A>;
a := b..c;
a := b..c<A>;
a := b..c<A>();
a := b... * 3;

-----------------------------------------------------------

(source_file
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (binary_expression
            (expression
              (any_identifier
                (no_namespace_identifier
                  (template_identifier
                    (non_template_identifier
                      (ordinary_identifier))
                    (template_call_arguments
                      (expression_or_comma_expressions
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier)))))))))))
            (expression
              (any_identifier
                (no_namespace_identifier
                  (template_identifier
                    (non_template_identifier
                      (ordinary_identifier))
                    (template_call_arguments
                      (expression_or_comma_expressions
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier))))))))))))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (member_access
            (expression
              (any_identifier
                (no_namespace_identifier
                  (non_template_identifier
                    (ordinary_identifier)))))
            (any_identifier
              (no_namespace_identifier
                (non_template_identifier
                  (ordinary_identifier)))))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (member_access
            (expression
              (any_identifier
                (no_namespace_identifier
                  (non_template_identifier
                    (ordinary_identifier)))))
            (any_identifier
              (no_namespace_identifier
                (template_identifier
                  (non_template_identifier
                    (ordinary_identifier))
                  (template_call_arguments
                    (expression_or_comma_expressions
                      (expression
                        (any_identifier
                          (no_namespace_identifier
                            (non_template_identifier
                              (ordinary_identifier)))))))))))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (method_call
            (expression
              (any_identifier
                (no_namespace_identifier
                  (non_template_identifier
                    (ordinary_identifier)))))
            (any_identifier
              (no_namespace_identifier
                (template_identifier
                  (non_template_identifier
                    (ordinary_identifier))
                  (template_call_arguments
                    (expression_or_comma_expressions
                      (expression
                        (any_identifier
                          (no_namespace_identifier
                            (non_template_identifier
                              (ordinary_identifier))))))))))
            (parentheses_expression))))))
  (declaration
    (expression_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (expression_definition
        (left_side_of_definition)
        (expression
          (binary_expression
            (expression
              (unary_expression
                (unary_postfix_expression
                  (expression
                    (any_identifier
                      (no_namespace_identifier
                        (non_template_identifier
                          (ordinary_identifier))))))))
            (expression
              (literal
                (number)))))))))

===========================================================
A requires constraint on a variadic function
===========================================================

print: <Args...: type>
       (inout out: std::ostream, args...: Args)
       requires sizeof...(Args) >= 1
= {
    (out << ... << args);
}

-----------------------------------------------------------

(source_file
  (declaration
    (block_declaration
      (declaration_left_side
        (non_template_identifier
          (ordinary_identifier)))
      (block_definition
        (left_side_of_definition
          (template_declaration_arguments
            (comma_seperated_declarations
              (function_declaration_argument
                (declaration
                  (no_definition_declaration
                    (declaration_left_side
                      (non_template_identifier
                        (ordinary_identifier)))
                    (type
                      (type_type)))))))
          (type
            (function_type
              (function_type_without_return_type
                (comma_seperated_declarations
                  (function_declaration_argument
                    (passing_style)
                    (declaration
                      (no_definition_declaration
                        (declaration_left_side
                          (non_template_identifier
                            (ordinary_identifier)))
                        (type
                          (expression
                            (any_identifier
                              (namespaced_identifier
                                (no_namespace_identifier
                                  (non_template_identifier
                                    (ordinary_identifier)))
                                (no_namespace_identifier
                                  (non_template_identifier
                                    (ordinary_identifier))))))))))
                  (function_declaration_argument
                    (declaration
                      (no_definition_declaration
                        (declaration_left_side
                          (non_template_identifier
                            (ordinary_identifier)))
                        (type
                          (expression
                            (any_identifier
                              (no_namespace_identifier
                                (non_template_identifier
                                  (ordinary_identifier)))))))))))))
          (expression
            (binary_expression
              (expression
                (function_call
                  (expression
                    (unary_expression
                      (unary_postfix_expression
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier))))))))
                  (parentheses_expression
                    (expression_or_comma_expressions
                      (expression
                        (any_identifier
                          (no_namespace_identifier
                            (non_template_identifier
                              (ordinary_identifier)))))))))
              (expression
                (literal
                  (number))))))
        (block
          (statement
            (non_block_statement
              (expression
                (parentheses_expression
                  (expression_or_comma_expressions
                    (expression
                      (binary_expression
                        (expression
                          (any_identifier
                            (no_namespace_identifier
                              (non_template_identifier
                                (ordinary_identifier)))))
                        (expression
                          (binary_expression
                            (expression
                              (expansion_dots))
                            (expression
                              (any_identifier
                                (no_namespace_identifier
                                  (non_template_identifier
                                    (ordinary_identifier)))))))))))))))))))
